!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	error.cpp	/^class A{$/;"	c	file:
ATMMachine	javaState.java	/^	public ATMMachine(){$/;"	m	class:ATMMachine
ATMMachine	javaState.java	/^public class ATMMachine {$/;"	c
ATMState	javaState.java	/^public interface ATMState {$/;"	i
Animal	virtual.cpp	/^Animal::Animal(){$/;"	f	class:Animal
Animal	virtual.cpp	/^class Animal {$/;"	c	file:
Base	InitBase.cpp	/^Base :: Base() { cout << "Base Default Ctor" << endl;}$/;"	f	class:Base
Base	InitBase.cpp	/^Base :: Base(const Base& a): _a(a._a) { cout << "Base Copy Ctor" << endl;};$/;"	f	class:Base
Base	InitBase.cpp	/^Base :: Base(int a): _a(a){ cout << "Base Ctor" << endl;}$/;"	f	class:Base
Base	InitBase.cpp	/^class Base {$/;"	c	file:
Base	diamond.cpp	/^        Base(){num=10;}$/;"	f	class:Base
Base	diamond.cpp	/^class Base{$/;"	c	file:
Base	sharedPtr.cpp	/^    Base() { std::cout << "  Base::Base()\\n"; }$/;"	f	struct:Base
Base	sharedPtr.cpp	/^struct Base$/;"	s	file:
Base	typeCast.cpp	/^class Base{$/;"	c	file:
Base1	multiplInh.cpp	/^class Base1{$/;"	c	file:
Base2	multiplInh.cpp	/^class Base2{$/;"	c	file:
BinaryTree	strategy.cpp	/^class BinaryTree: public SearchBehavior$/;"	c	file:
CC	makefile	/^CC = g++$/;"	m
CFLAGS	makefile	/^CFLAGS  = -g -Wall$/;"	m
Collection	strategy.cpp	/^        Collection(){}$/;"	f	class:Collection
Collection	strategy.cpp	/^class Collection$/;"	c	file:
ContainedType	autoPtr.cpp	/^typedef int ContainedType;$/;"	t	file:
Context	InitializerList.cpp	/^        Context(State _oState) : oState(_oState) {$/;"	f	class:Context
Context	InitializerList.cpp	/^class Context {$/;"	c	file:
Derived	InitBase.cpp	/^Derived :: Derived(const Derived& d): _b(d._b) { cout << "Derived Copy Ctor" << endl;};$/;"	f	class:Derived
Derived	InitBase.cpp	/^Derived :: Derived(int b): _b(b){ cout << "Derived Ctor" << endl;}$/;"	f	class:Derived
Derived	InitBase.cpp	/^Derived :: Derived(int b, int a): _b(b), Base(a){ cout << "Derived Ctor with Base init" << endl;}$/;"	f	class:Derived
Derived	InitBase.cpp	/^class Derived : public Base {$/;"	c	file:
Derived	diamond.cpp	/^class Derived: virtual public Intermediate1, virtual public Intermediate2{$/;"	c	file:
Derived	multiplInh.cpp	/^class Derived: public Base1,public Base2{$/;"	c	file:
Derived	sharedPtr.cpp	/^    Derived() { std::cout << "  Derived::Derived()\\n"; }$/;"	f	struct:Derived
Derived	sharedPtr.cpp	/^struct Derived: public Base$/;"	s	file:
Desrived	typeCast.cpp	/^class Desrived : public Base{$/;"	c	file:
Egg	singletol2.cpp	/^    Egg(const Egg& _e){}$/;"	f	class:Egg	file:
Egg	singletol2.cpp	/^    Egg(int ii) : i(ii) {$/;"	f	class:Egg	file:
Egg	singletol2.cpp	/^class Egg{$/;"	c	file:
Emp	assignmentOperator.cpp	/^        Emp(string _name,int* _id):name(_name),id(_id) {}$/;"	f	class:Emp
Emp	assignmentOperator.cpp	/^class Emp {$/;"	c	file:
Emp	copyCtor.cpp	/^		Emp(const Emp& old):x(old.x),y(old.y),k(old.k) {$/;"	f	class:Emp
Emp	copyCtor.cpp	/^        Emp(int _x,int& _y,int* _z,int const _k):x(_x),y(_y),z(_z),k(_k){} $/;"	f	class:Emp
Emp	copyCtor.cpp	/^class Emp{$/;"	c	file:
Emp	smartPointer.cpp	/^        Emp(string name, int id):_name(name),_id(id) {}	\/\/ Initializer list$/;"	f	class:Emp
Emp	smartPointer.cpp	/^class Emp {$/;"	c	file:
HasCard	javaState.java	/^	public HasCard(ATMMachine newATMMachine){$/;"	m	class:HasCard
HasCard	javaState.java	/^public class HasCard implements ATMState {$/;"	c
HashTable	strategy.cpp	/^class HashTable: public SearchBehavior$/;"	c	file:
Heap	strategy.cpp	/^class Heap: public SortBehavior$/;"	c	file:
INVALID	factory.cpp	/^enum genre_e{ROCK,POP, REGGAE, INVALID};$/;"	e	enum:genre_e	file:
Intermediate1	diamond.cpp	/^class Intermediate1 :  public Base{$/;"	c	file:
Intermediate2	diamond.cpp	/^class Intermediate2 : public Base{$/;"	c	file:
Machine	state.cpp	/^Machine::Machine(){$/;"	f	class:Machine
Machine	state.cpp	/^class Machine {$/;"	c	file:
Merge	strategy.cpp	/^class Merge: public SortBehavior$/;"	c	file:
Music	factory.cpp	/^class Music {$/;"	c	file:
MusicFactory	factory.cpp	/^class MusicFactory$/;"	c	file:
OFF	state.cpp	/^    OFF(){cout << "   OFF-ctor ";}$/;"	f	class:OFF
OFF	state.cpp	/^class OFF: public State{$/;"	c	file:
OFF	stateSwitch.cpp	/^enum state{ON=0,OFF};$/;"	e	enum:state	file:
ON	state.cpp	/^    ON(){cout << "   ON-ctor ";}$/;"	f	class:ON
ON	state.cpp	/^class ON: public State{$/;"	c	file:
ON	stateSwitch.cpp	/^enum state{ON=0,OFF};$/;"	e	enum:state	file:
OffState	stateSwitch.cpp	/^	OffState(){$/;"	f	class:OffState
OffState	stateSwitch.cpp	/^class OffState : public State{$/;"	c	file:
OnState	stateSwitch.cpp	/^	OnState(){$/;"	f	class:OnState
OnState	stateSwitch.cpp	/^class OnState : public State{$/;"	c	file:
POP	factory.cpp	/^enum genre_e{ROCK,POP, REGGAE, INVALID};$/;"	e	enum:genre_e	file:
Pop	factory.cpp	/^class Pop: public Music$/;"	c	file:
PrintFError	vsnprintf.cpp	/^void PrintFError ( const char * format, ... )$/;"	f
Quick	strategy.cpp	/^class Quick: public SortBehavior {$/;"	c	file:
REGGAE	factory.cpp	/^enum genre_e{ROCK,POP, REGGAE, INVALID};$/;"	e	enum:genre_e	file:
ROCK	factory.cpp	/^enum genre_e{ROCK,POP, REGGAE, INVALID};$/;"	e	enum:genre_e	file:
Ram	cppTypeCasting.cpp	/^        Ram(){}$/;"	f	class:Ram
Ram	cppTypeCasting.cpp	/^class Ram : public student$/;"	c	file:
Reggae	factory.cpp	/^class Reggae: public Music$/;"	c	file:
Rock	factory.cpp	/^class Rock: public Music$/;"	c	file:
SIZE	revString.cpp	6;"	d	file:
SearchBehavior	strategy.cpp	/^class SearchBehavior$/;"	c	file:
Sequential	strategy.cpp	/^class Sequential: public SearchBehavior$/;"	c	file:
SetState	stateSwitch.cpp	/^void Switch::SetState(int newState){$/;"	f	class:Switch
Singleton	singletol.cpp	/^        Singleton(){						\/\/ Ctor in private section$/;"	f	class:Singleton	file:
Singleton	singletol.cpp	/^        Singleton(const Singleton& obj){	\/\/Copy Ctor also in private section$/;"	f	class:Singleton	file:
Singleton	singletol.cpp	/^class Singleton{$/;"	c	file:
SmartPrt	smartPointer.cpp	/^        SmartPrt(Emp *_emp): emp(_emp) {}$/;"	f	class:SmartPrt
SmartPrt	smartPointer.cpp	/^class SmartPrt {$/;"	c	file:
SmartPtr	smartPointer2.cpp	/^    explicit SmartPtr(T *p = NULL) { ptr = p; }$/;"	f	class:SmartPtr
SmartPtr	smartPointer2.cpp	/^class SmartPtr$/;"	c	file:
SortBehavior	strategy.cpp	/^class SortBehavior$/;"	c	file:
State	InitializerList.cpp	/^        State() {$/;"	f	class:State
State	InitializerList.cpp	/^        State(const State& old) : state(old.state) {$/;"	f	class:State
State	InitializerList.cpp	/^        State(int _state):state(_state) {$/;"	f	class:State
State	InitializerList.cpp	/^class State {$/;"	c	file:
State	state.cpp	/^class State{$/;"	c	file:
State	stateSwitch.cpp	/^		State(){}$/;"	f	class:State
State	stateSwitch.cpp	/^class State{$/;"	c	file:
Switch	stateSwitch.cpp	/^Switch::Switch(){$/;"	f	class:Switch
Switch	stateSwitch.cpp	/^class Switch {$/;"	c	file:
TARGET	makefile	/^TARGET=state$/;"	m
Test	genricClass.cpp	/^        Test(T _data,T _name): data(_data),name(_name) {}$/;"	f	class:Test
Test	genricClass.cpp	/^class Test{$/;"	c	file:
Test	selfObject.cpp	/^class Test {$/;"	c	file:
Test	smartPointer2.cpp	/^    Test(int p = NULL) { val = p; }$/;"	f	class:Test
Test	smartPointer2.cpp	/^class Test$/;"	c	file:
Test	this.cpp	/^        Test (int x = 0, int y = 0) { this->x = x; this->y = y; }$/;"	f	class:Test
Test	this.cpp	/^class Test$/;"	c	file:
Tiger	virtual.cpp	/^Tiger::Tiger(){$/;"	f	class:Tiger
Tiger	virtual.cpp	/^class Tiger: public Animal {$/;"	c	file:
Time	operatorOverloading.cpp	/^        Time(){$/;"	f	class:Time
Time	operatorOverloading.cpp	/^        Time(int _hh,int _mm):hh(_hh),mm(_mm){}$/;"	f	class:Time
Time	operatorOverloading.cpp	/^class Time{$/;"	c	file:
X	thisType.cpp	/^    X(int a):a(this->a){}$/;"	f	class:X
X	thisType.cpp	/^class X {$/;"	c	file:
_a	InitBase.cpp	/^	int _a;$/;"	m	class:Base	file:
_b	InitBase.cpp	/^	int _b;$/;"	m	class:Derived	file:
_id	singletol.cpp	/^        int 	_id;$/;"	m	class:Singleton	file:
_id	smartPointer.cpp	/^        int _id;$/;"	m	class:Emp	file:
_name	singletol.cpp	/^        string 	_name;$/;"	m	class:Singleton	file:
_name	smartPointer.cpp	/^        string _name;$/;"	m	class:Emp	file:
_x	functor.cpp	/^        int _x;$/;"	m	class:myFunctorClass	file:
a	thisType.cpp	/^    int a;$/;"	m	class:X	file:
atmMachine	javaState.java	/^	ATMMachine atmMachine;$/;"	f	class:HasCard
atmOutOfMoney	javaState.java	/^	ATMState atmOutOfMoney;$/;"	f	class:ATMMachine
atmState	javaState.java	/^	ATMState atmState;$/;"	f	class:ATMMachine
cashInMachine	javaState.java	/^	int cashInMachine = 2000;$/;"	f	class:ATMMachine
cat	funptr.cpp	/^class cat{$/;"	c	file:
common	multiplInh.cpp	/^        virtual void common(){$/;"	f	class:Base1
common	multiplInh.cpp	/^        virtual void common(){$/;"	f	class:Base2
common	multiplInh.cpp	/^        void common(){$/;"	f	class:Derived
correctPinEntered	javaState.java	/^	boolean correctPinEntered = false;$/;"	f	class:ATMMachine
currState	stateSwitch.cpp	/^		State* currState;$/;"	m	class:Switch	file:
current	state.cpp	/^  class State *current;$/;"	m	class:Machine	typeref:class:Machine::State	file:
data	ListLoop.cpp	/^    int data;$/;"	m	struct:node	file:
data	genricClass.cpp	/^    T data;$/;"	m	class:Test	file:
detectloop	ListLoop.cpp	/^int detectloop(struct node *list)$/;"	f
display	genricClass.cpp	/^        void display(){$/;"	f	class:Test
doc	xmlParse.py	/^doc=minidom.parse("test.xml")$/;"	v
e	singletol2.cpp	/^    static Egg e;$/;"	m	class:Egg	file:
ejectCard	javaState.java	/^	public void ejectCard() {$/;"	m	class:ATMMachine
ejectCard	javaState.java	/^	public void ejectCard() {$/;"	m	class:HasCard
ejectCard	javaState.java	/^	void ejectCard();$/;"	m	interface:ATMState
emp	smartPointer.cpp	/^        Emp* emp;$/;"	m	class:SmartPrt	file:
f	error.cpp	/^    void f(){$/;"	f	class:A	file:
fun	cppTypeCasting.cpp	/^        void fun() const$/;"	f	class:student
fun	reference.cpp	/^int& fun()$/;"	f
fun	thisType.cpp	/^    void fun() const {$/;"	f	class:X
g	error.cpp	/^    void g(){$/;"	f	class:A	file:
genre_e	factory.cpp	/^enum genre_e{ROCK,POP, REGGAE, INVALID};$/;"	g	file:
getBase	diamond.cpp	/^        int getBase(){$/;"	f	class:Base
getCurrent	state.cpp	/^	State* getCurrent(){$/;"	f	class:Machine
getHasPin	javaState.java	/^	public ATMState getHasPin() { return hasCorrectPin; }$/;"	m	class:ATMMachine
getHeight	virtual.cpp	/^		int getHeight() {return height;};$/;"	f	class:Tiger
getId	singletol.cpp	/^        int getId(){$/;"	f	class:Singleton
getId	smartPointer.cpp	/^        int getId() {$/;"	f	class:Emp
getInst	singletol.cpp	/^        static Singleton* getInst(){$/;"	f	class:Singleton
getMusic	factory.cpp	/^		Music *getMusic(genre_e genre)$/;"	f	class:MusicFactory
getName	singletol.cpp	/^        string getName(){$/;"	f	class:Singleton
getName	smartPointer.cpp	/^        string getName() {$/;"	f	class:Emp
getNoCardState	javaState.java	/^	public ATMState getNoCardState() { return noCard; }$/;"	m	class:ATMMachine
getNoCashState	javaState.java	/^	public ATMState getNoCashState() { return atmOutOfMoney; }$/;"	m	class:ATMMachine
getRoll	cppTypeCasting.cpp	/^        int getRoll()  { return roll; }$/;"	f	class:student
getVal	smartPointer2.cpp	/^    int getVal(){ return val;}$/;"	f	class:Test
getWeight	virtual.cpp	/^		int getWeight() {return weight;};$/;"	f	class:Tiger
getWeight	virtual.cpp	/^		virtual int getWeight() {};$/;"	f	class:Animal
getYesCardState	javaState.java	/^	public ATMState getYesCardState() { return hasCard; }$/;"	m	class:ATMMachine
hasCard	javaState.java	/^	ATMState hasCard;     $/;"	f	class:ATMMachine
hasCorrectPin	javaState.java	/^	ATMState hasCorrectPin;$/;"	f	class:ATMMachine
height	virtual.cpp	/^		int height; $/;"	m	class:Tiger	file:
hh	operatorOverloading.cpp	/^        int hh;$/;"	m	class:Time	file:
highest	stl.cpp	/^int highest(vector<int> &values){$/;"	f
i	singletol2.cpp	/^    int i;$/;"	m	class:Egg	file:
id	assignmentOperator.cpp	/^        int* id;$/;"	m	class:Emp	file:
insertCard	javaState.java	/^	public void insertCard() {$/;"	m	class:ATMMachine
insertCard	javaState.java	/^	public void insertCard() {$/;"	m	class:HasCard
insertCard	javaState.java	/^	void insertCard();$/;"	m	interface:ATMState
insertPin	javaState.java	/^	public void insertPin(int pinEntered) {$/;"	m	class:HasCard
insertPin	javaState.java	/^	public void insertPin(int pinEntered){$/;"	m	class:ATMMachine
insertPin	javaState.java	/^	void insertPin(int pinEntered);$/;"	m	interface:ATMState
inst	singletol.cpp	/^        static Singleton* inst;				\/\/ instance in private section$/;"	m	class:Singleton	file:
inst	singletol.cpp	/^Singleton* Singleton :: inst = NULL;$/;"	m	class:Singleton	file:
instance	singletol2.cpp	/^        static Egg& instance(){$/;"	f	class:Egg
k	copyCtor.cpp	/^        int const k;$/;"	m	class:Emp	file:
m_search	strategy.cpp	/^        SearchBehavior* m_search;$/;"	m	class:Collection	file:
m_sort	strategy.cpp	/^        SortBehavior* m_sort;$/;"	m	class:Collection	file:
main	InitBase.cpp	/^int main() {$/;"	f
main	InitializerList.cpp	/^int main(){$/;"	f
main	ListLoop.cpp	/^int main()$/;"	f
main	armstrong.cpp	/^int main(){$/;"	f
main	array.cpp	/^int main(){$/;"	f
main	assignmentOperator.cpp	/^int main() {$/;"	f
main	autoPtr.cpp	/^int main(int argc, char **argv)$/;"	f
main	copyCtor.cpp	/^int main() {$/;"	f
main	cppTypeCasting.cpp	/^int main(){$/;"	f
main	dec.cpp	/^int main () {$/;"	f
main	defCotr.cpp	/^int main(){$/;"	f
main	diamond.cpp	/^int main(){$/;"	f
main	factory.cpp	/^int main()$/;"	f
main	functor.cpp	/^int main()$/;"	f
main	funptr.cpp	/^int main(){$/;"	f
main	genricClass.cpp	/^int main(){$/;"	f
main	int.cpp	/^int main(){$/;"	f
main	list.cpp	/^int main(){$/;"	f
main	map.cpp	/^int main ()$/;"	f
main	map2.cpp	/^int main(){$/;"	f
main	mem.cpp	/^int main()$/;"	f
main	multiplInh.cpp	/^int main(){$/;"	f
main	operatorOverloading.cpp	/^int main(){$/;"	f
main	palindrom.cpp	/^int main(){$/;"	f
main	pointers.cpp	/^int main(){$/;"	f
main	ptr++.c	/^int main(){$/;"	f
main	reference.cpp	/^int main(){$/;"	f
main	revString.cpp	/^int main(){$/;"	f
main	selfObject.cpp	/^int main()$/;"	f
main	sharedPtr.cpp	/^int main()$/;"	f
main	singletol.cpp	/^int main(){$/;"	f
main	singletol2.cpp	/^int main(){$/;"	f
main	smartPointer.cpp	/^int main(){$/;"	f
main	smartPointer2.cpp	/^int main()$/;"	f
main	state.cpp	/^int main(){$/;"	f
main	stateSwitch.cpp	/^int main(){$/;"	f
main	stl.cpp	/^int main(){$/;"	f
main	strategy.cpp	/^int main(int argc, char *argv[])$/;"	f
main	template.cpp	/^int main()$/;"	f
main	this.cpp	/^int main()$/;"	f
main	thisType.cpp	/^int main(){$/;"	f
main	thr.py	/^def main():$/;"	f
main	typeCast.cpp	/^int main(){$/;"	f
main	virtual.cpp	/^int main(){	$/;"	f
main	volatile.cpp	/^int main(void)$/;"	f
main	vsnprintf.cpp	/^int main ()$/;"	f
mm	operatorOverloading.cpp	/^        int mm;$/;"	m	class:Time	file:
myFunctorClass	functor.cpp	/^        myFunctorClass (int x) : _x( x ) {}$/;"	f	class:myFunctorClass
myFunctorClass	functor.cpp	/^class myFunctorClass$/;"	c	file:
myMax	template.cpp	/^T myMax(T x, T y)$/;"	f
name	assignmentOperator.cpp	/^        string name;$/;"	m	class:Emp	file:
name	genricClass.cpp	/^    N name;$/;"	m	class:Test	file:
name	xmlParse.py	/^name=doc.getElementsByTagName("country")$/;"	v
next	ListLoop.cpp	/^    struct node* next;$/;"	m	struct:node	typeref:struct:node::node	file:
noCard	javaState.java	/^	ATMState noCard;$/;"	f	class:ATMMachine
node	ListLoop.cpp	/^struct node$/;"	s	file:
num	diamond.cpp	/^    int num;$/;"	m	class:Base	file:
oState	InitializerList.cpp	/^    State oState;$/;"	m	class:Context	file:
off	state.cpp	/^    virtual void off(Machine *m){cout << "   already OFF\\n";}$/;"	f	class:State
off	state.cpp	/^void Machine::off(){$/;"	f	class:Machine
off	state.cpp	/^void ON::off(Machine *m){$/;"	f	class:ON
off	stateSwitch.cpp	/^		virtual void off(Switch* op){}$/;"	f	class:State
off	stateSwitch.cpp	/^void OffState::off(Switch* op){$/;"	f	class:OffState
off	stateSwitch.cpp	/^void OnState::off(Switch* op){$/;"	f	class:OnState
off	stateSwitch.cpp	/^void Switch::off(){$/;"	f	class:Switch
offState	stateSwitch.cpp	/^		State* offState;$/;"	m	class:Switch	file:
on	state.cpp	/^    virtual void on(Machine *m){cout << "   already ON\\n";}$/;"	f	class:State
on	state.cpp	/^void Machine::on(){$/;"	f	class:Machine
on	state.cpp	/^void OFF::on(Machine *m){$/;"	f	class:OFF
on	stateSwitch.cpp	/^		virtual void on(Switch* op){}$/;"	f	class:State
on	stateSwitch.cpp	/^void OffState::on(Switch* op){$/;"	f	class:OffState
on	stateSwitch.cpp	/^void OnState::on(Switch* op){$/;"	f	class:OnState
on	stateSwitch.cpp	/^void Switch::on(){$/;"	f	class:Switch
onState	stateSwitch.cpp	/^		State* onState;$/;"	m	class:Switch	file:
operator ()	functor.cpp	/^        int operator() (int y) { return _x + y; }$/;"	f	class:myFunctorClass
operator *	smartPointer.cpp	/^        Emp& operator * () {  \/\/ To dereference$/;"	f	class:SmartPrt
operator *	smartPointer2.cpp	/^    T & operator * () {  return *ptr; }$/;"	f	class:SmartPtr
operator +	operatorOverloading.cpp	/^        Time operator+(const Time& old){$/;"	f	class:Time
operator ->	smartPointer.cpp	/^        Emp* operator -> () { \/\/ To dereference and access a field$/;"	f	class:SmartPrt
operator ->	smartPointer2.cpp	/^    T * operator -> () { return ptr; }$/;"	f	class:SmartPtr
operator =	InitializerList.cpp	/^        State& operator = (const State& old) {$/;"	f	class:State
operator =	assignmentOperator.cpp	/^        Emp& operator = (const Emp& old) {    	\/\/ if we have assinment operator chaining$/;"	f	class:Emp
operator =	operatorOverloading.cpp	/^        Time& operator=(const Time& old){$/;"	f	class:Time
power	armstrong.cpp	/^int power(int num, int size){$/;"	f
print	assignmentOperator.cpp	/^        void print() {$/;"	f	class:Emp
print	copyCtor.cpp	/^        void print() {$/;"	f	class:Emp
print	diamond.cpp	/^        void print(){$/;"	f	class:Derived
print	operatorOverloading.cpp	/^        void print(){$/;"	f	class:Time
print	this.cpp	/^        void print() { cout << "x = " << x << " y = " << y << endl; }$/;"	f	class:Test
ptr	smartPointer2.cpp	/^    T *ptr;  \/\/ Actual pointer$/;"	m	class:SmartPtr	file:
push	ListLoop.cpp	/^void push(struct node** head_ref, int new_data)$/;"	f
rank	xmlParse.py	/^rank=doc.getElementsByTagName("rank")$/;"	v
requestCash	javaState.java	/^	public void requestCash(int cashToWithdraw) {$/;"	m	class:ATMMachine
requestCash	javaState.java	/^	public void requestCash(int cashToWithdraw) {$/;"	m	class:HasCard
requestCash	javaState.java	/^	void requestCash(int cashToWithdraw);$/;"	m	interface:ATMState
roll	cppTypeCasting.cpp	/^        int roll;$/;"	m	class:student	file:
search	strategy.cpp	/^        virtual void search() const {$/;"	f	class:BinaryTree
search	strategy.cpp	/^        virtual void search() const {$/;"	f	class:HashTable
search	strategy.cpp	/^        virtual void search() const {$/;"	f	class:Sequential
search	strategy.cpp	/^        void search() const {$/;"	f	class:Collection
self	selfObject.cpp	/^    static Test self;  \/\/ works fine$/;"	m	class:Test	file:
setATMState	javaState.java	/^	void setATMState(ATMState newATMState){$/;"	m	class:ATMMachine
setCashInMachine	javaState.java	/^	public void setCashInMachine(int newCashInMachine){$/;"	m	class:ATMMachine
setCurrent	state.cpp	/^    void setCurrent(State *s){$/;"	f	class:Machine
setX	this.cpp	/^        Test& setX(int a) { x = a; return *this; }$/;"	f	class:Test
setY	this.cpp	/^        Test& setY(int b) { y = b; return *this; }$/;"	f	class:Test
set_search	strategy.cpp	/^        void set_search(SearchBehavior* s){$/;"	f	class:Collection
set_sort	strategy.cpp	/^        void set_sort(SortBehavior* s){$/;"	f	class:Collection
song	factory.cpp	/^		void song()$/;"	f	class:Pop
song	factory.cpp	/^		void song()$/;"	f	class:Reggae
song	factory.cpp	/^		void song()$/;"	f	class:Rock
sort	strategy.cpp	/^        virtual void sort() const {$/;"	f	class:Heap
sort	strategy.cpp	/^        virtual void sort() const {$/;"	f	class:Merge
sort	strategy.cpp	/^        virtual void sort() const {$/;"	f	class:Quick
sort	strategy.cpp	/^        void sort() const {$/;"	f	class:Collection
state	InitializerList.cpp	/^    int state;$/;"	m	class:State	file:
state	stateSwitch.cpp	/^enum state{ON=0,OFF};$/;"	g	file:
student	cppTypeCasting.cpp	/^        student(int r):roll(r) {}$/;"	f	class:student
student	cppTypeCasting.cpp	/^class student$/;"	c	file:
thr	sharedPtr.cpp	/^void thr(std::shared_ptr<Base> p)$/;"	f
thread1	thr.py	/^def thread1(a,b):$/;"	f
thread2	thr.py	/^def thread2(a,b):$/;"	f
val	singletol2.cpp	/^        int val() const{return i;}$/;"	f	class:Egg
val	smartPointer2.cpp	/^    int val;$/;"	m	class:Test	file:
walk	funptr.cpp	/^		void walk(){$/;"	f	class:cat
weight	virtual.cpp	/^		int weight;$/;"	m	class:Animal	file:
weight	virtual.cpp	/^		int weight;$/;"	m	class:Tiger	file:
x	copyCtor.cpp	/^        int x;$/;"	m	class:Emp	file:
x	this.cpp	/^        int x;$/;"	m	class:Test	file:
y	copyCtor.cpp	/^        int &y;$/;"	m	class:Emp	file:
y	this.cpp	/^        int y;$/;"	m	class:Test	file:
z	copyCtor.cpp	/^        int *z;$/;"	m	class:Emp	file:
~Base	InitBase.cpp	/^Base :: ~Base() { cout << "Base Dtor" << endl;};$/;"	f	class:Base
~Base	sharedPtr.cpp	/^    ~Base() { std::cout << "  Base::~Base()\\n"; }$/;"	f	struct:Base
~Context	InitializerList.cpp	/^        ~Context() {$/;"	f	class:Context
~Derived	InitBase.cpp	/^Derived :: ~Derived () { cout << "Derived Dtor" << endl;};$/;"	f	class:Derived
~Derived	sharedPtr.cpp	/^    ~Derived() { std::cout << "  Derived::~Derived()\\n"; }$/;"	f	struct:Derived
~Emp	assignmentOperator.cpp	/^        ~Emp() {$/;"	f	class:Emp
~OFF	state.cpp	/^    ~OFF(){cout << "   dtor-OFF\\n";}$/;"	f	class:OFF
~ON	state.cpp	/^    ~ON(){cout << "   dtor-ON\\n";}$/;"	f	class:ON
~SmartPtr	smartPointer2.cpp	/^    ~SmartPtr() { delete(ptr); }$/;"	f	class:SmartPtr
~State	InitializerList.cpp	/^        ~State() {$/;"	f	class:State
~Switch	stateSwitch.cpp	/^Switch::~Switch(){$/;"	f	class:Switch
