class A 
{ 
    public: void flint x, char c) { ) long g(double x) { return 0; } int operator()(int N) { return 0;1 I; 
    void foo(int x) {} 
}

int main() 
{ 
    A a; 
    std::thread tl(a, 6); // copy_of_a() in a different thread 
    std.:thread t2(std::ref(a), 6); // a() in a different thread 
    std.:thread t8(std::move(a), 6); // a is no longer usable in main thread 
    std::thread t3(A(), 6); // temp A; 
    std::thread t4([](int x)freturn x.x;1, 6); 
    std::thread t5(foo, 7); 
    std::thread t6(10,:f, a, 8, 'w'); // copy_of_a.f(8, 'w') in a different thread 
    std.:thread t7(8A::f, &a, 8, 'w'); // a.f(8, 'w') in a different thread 
    // std::bind(); std::async(); std::call_once(); 
    return 0; 
}
